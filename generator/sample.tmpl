package {{.Name}}


{{range $index, $element  := .Structs}}
    {{template "struct" $element}}
{{end}}


{{range $index, $element  := .Functions}}
    {{template "function" $element}}
{{end}}






{{define "struct"}}
type {{ .Name }} struct{
    {{ range $i, $field := .Elements }}
        {{$field.Name}} {{$field.Type}}
    {{end}}
}
{{end}}

{{define "function"}}
func {{if .Reciever}} {{.Reciever}} {{end}} {{ .Name }}(){
    {{ range $i, $statement := .Statements }}
    {{template "statement" $statement}}
    {{end}}
}
{{end}}


{{define "statement"}}
{{if .AssignStatement}}
{{template "assign" .AssignStatement}}
{{end}}

{{if .IfStatement}}
{{template "if" .IfStatement}}     
{{end}}

{{if .FunctionCall}}
{{template "call" .FunctionCall}}
{{end}}

{{end}}



{{define "if"}}
if {{.BoolExpression.Left}}=={{.BoolExpression.Right}} {
    {{range $i, $statement := .Body }}
    {{template "statement" $statement}}
    {{end}}
} {{if .Else}} else {{template "if"}} {{end}}
{{end}}


{{define "call"}}
{{.Name}}({{range $i, $arg := .Args}}{{$arg}},{{end}})     
{{end}}

{{define "assign"}}
{{.}}
{{end}}
